from aiogram import types,F
from aiogram.fsm.context import FSMContext
from states.check_test_file import CheckTestState
from states.languages import Language
from keyboards.reply.home import home_uz, home_ru, home_en
from keyboards.reply.back import back_en, back_uz, back_ru, back_alone_en,back_alone_uz,back_alone_ru
from states.home import HomeState
from loader import router,bot
from states.user_login import UserData
from utils.delete_message import delete_message

@router.callback_query(HomeState.home_state)
async def home_start(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=30)

    bot_language = call.data
    # Update the state machine's data with the chosen language
    await state.update_data(
        {
            "bot_lang": bot_language,
        }
    )
    data = await state.get_data()

    # Delete previous message
    del_msg = data.get('del_msg')
    await delete_message(chat_id=call.from_user.id,message_id=del_msg.message_id)
   

    # Send the user notification message
    if   bot_language=='uz':
        await call.message.answer(f"<blockquote><b>TIL:</b> O'zbek</blockquote>\n\n<b>Menudan tanlang</b>", reply_markup=home_uz)
        # await call.message.answer(f"Iltimos <code>HEMIS_ID</code> ni kiriting")
    elif bot_language=='en':
        await call.message.answer(f"<blockquote><b>Language:</b> English</blockquote>\n\n<b>Select from menu</b>", reply_markup=home_en)
        # await call.message.answer(f"Please enter <code>HEMIS_ID</code>")
    elif bot_language=='ru':
        await call.message.answer(f"<blockquote><b>–Ø–∑—ã–∫:</b> –†—É—Å—Å–∫–∏–π</blockquote>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é</b>", reply_markup=home_ru)
        # await call.message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <code>HEMIS_ID</code>")
    # else:
    #     await call.message.answer(f"Iltimos qayta urining\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\nPlease try again")

    # Change state to choose_menu
    await state.set_state(HomeState.choose_menu)
    


@router.message(F.text.in_ ({"üóÉÔ∏è Testni yuklash","üóÉÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç","üóÉÔ∏è Upload the test"}), HomeState.choose_menu)
async def upload_test(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_language = data.get('bot_lang')

    if   bot_language=='uz':
        await message.answer(f"<blockquote><b>MENU:</b> {message.text}</blockquote>\n\nIltimos <code>HEMIS_ID</code> ni kiriting", reply_markup=back_alone_uz)
    elif bot_language=='en':
        await message.answer(f"<blockquote><b>MENU:</b> {message.text}</blockquote>\n\nPlease enter <code>HEMIS_ID</code>", reply_markup=back_alone_en)
    elif bot_language=='ru':
        await message.answer(f"<blockquote><b>MENU:</b> {message.text}</blockquote>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <code>HEMIS_ID</code>", reply_markup=back_alone_ru)
    # await message.answer(cache_time=30)
    
    # Change state to hemis_id
    await state.set_state(UserData.hemis_id)



@router.message(F.text.in_ ({"‚úîÔ∏è Testni tekshirish","‚úîÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Å—Ç","‚úîÔ∏è Check the test"}), HomeState.choose_menu)
async def checking_tes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_language = data.get('bot_lang')


    if bot_language=='uz':
        await message.answer(f"<blockquote><b>MENU:</b> {message.text}</blockquote>\n\nüì• <i>Test (.txt) faylini yuklang</i>", reply_markup=back_alone_uz)
    elif bot_language=='en':
        await message.answer(f"<blockquote><b>MENU:</b> {message.text}</blockquote>\n\nüì• <i>Upload the test (.txt) file</i>", reply_markup=back_alone_en)
    elif bot_language=='ru':
        await message.answer(f"<blockquote><b>MENU:</b> {message.text}</blockquote>\n\nüì• <i>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)</i>", reply_markup=back_alone_ru)
    # await message.answer(cache_time=30)

    # Change state to check_test_file
    await state.set_state(CheckTestState.check_test_file)


@router.message(F.text.in_ ({"‚öñÔ∏è Test yuborish qoidalari","‚öñÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤","‚öñÔ∏è Test submission rules"}), HomeState.choose_menu)
async def rules_reminder(message: types.Message, state: FSMContext):
    data = await state.get_data()
    bot_language = data.get('bot_lang')


    if bot_language=='uz':
        btn = back_alone_uz
        msg = f"<blockquote>{message.text}</blockquote>\n\
____\n\
1. <code>Savollar <b>.txt</b> faylida va <b>utf-8</b> formatida bo'lishi kerak</code>\n\
____\n\
2. <code>Savollar kamida 60 ta bo'lishi kerak</code>\n\
____\n\
3. <code>Savolning boshi <b>A.</b> kabi ko'rinishda boshlanishi mumkin emas.\nMasalan: I. Karimov kim?</code>\n\
____\n\
4. <code>Savol va Javoblar 2 yoki undan ko'p qator bo'lmasligi kerak</code>\n\
____\n\
5. <code>Javoblar katta harflarda va A. B. C. D. ko'rinishida 4 ta variantdan iborat bo'lishi kerak </code>\n\
____\n\
6. <code>Javoblar A. B. C. D. va ANSWER: A lotin harflarida bo'lishi shart.</code>\n\
____\n\
7. <code>Na'munaga e'tibor bering.</code>\
"
        
    elif bot_language=='en':
        btn = back_alone_en
        msg = f"<blockquote>{message.text}</blockquote>\n\
____\n\
1. <code>Questions must be in <b>.txt</b> file and <b>utf-8</b> format</code>\n\
____\n\
2. <code>There should be at least 60 questions</code>\n\
____\n\
3. <code>The beginning of the question cannot start in the form of <b>A.</b>.\nFor example: Who is I. Karimov?</code>\n\
____\n\
4. <code>Questions and Answers should not be 2 or more lines</code>\n\
____\n\
5. <code>Answers must be in capital letters and have 4 options in the form A. B. C. D. </code>\n\
____\n\
6. <code>Answers must be in Latin letters A. B. C. D. and ANSWER: A</code>\n\
____\n\
7. <code>Pay attention to the pattern.</code>\
"
    elif bot_language=='ru':
        btn = back_alone_ru
        msg = f"<blockquote>{message.text}</blockquote>\n\
____\n\
1. <code>–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–∞–π–ª–µ <b>.txt</b> –∏ —Ñ–æ—Ä–º–∞—Ç–µ <b>utf-8</b></code>\n\
____\n\
2. <code>–í–æ–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 60</code>\n\
____\n\
3. <code>–ù–∞—á–∞–ª–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–µ <b>A.</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò.–ö–∞—Ä–∏–º–æ–≤ –∫—Ç–æ —Ç–∞–∫–æ–π ?</code>\n\
____\n\
4. <code>–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2 –∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–∫</code>\n\
____\n\
5. <code>–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏ –∏ –∏–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –≤–∏–¥–µ A.B.C.D.</code>\n\
____\n\
6. <code>–û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ A. B. C. D. –∏ ANSWER: A</code>\n\
____\n\
7. <code>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —É–∑–æ—Ä.</code>\
    "
    # await message.answer(cache_time=30)

    # Send correct file to user
    file_path = "documents/namuna.txt"
    input_file = types.FSInputFile(file_path)
    await bot.send_document(document=input_file, caption=msg, chat_id=message.chat.id, reply_markup=btn)

    # Change state to info
    await state.set_state(HomeState.info)

